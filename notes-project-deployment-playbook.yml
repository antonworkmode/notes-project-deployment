# Playbook for notes_project application deployment.
#########################
---
- name: notes_project application deployment
  hosts: alma8
  any_errors_fatal: true
  become: true
  vars_files:
    - vars.yml
    - secrets.yml
##########
  tasks:
    - name: sudo dnf install epel-release
      dnf:
        name: ['epel-release']
        state: latest

    - name: sudo dnf update
      dnf:
        name: ['*']
        state: latest
        update_cache: true
##########
# django user
    - name: creating user for django project
      user:
        name: "{{ django_user }}"
        password: "{{ django_password | password_hash('sha512') }}"
        shell: /bin/bash
        update_password: on_create
      register: django_user_result

    - name: force new user to change password
      shell: "chage -d 0 {{ django_user }}"
      when: django_user_result.changed

    - name: sudo chmod 730 /home/django
      file:
        path: "{{ django_user_home_path }}"
        state: directory
        mode: '0730'

    - name: cloning a remote repository
      git:
        repo: "{{ git_remote_repository_url }}"
        dest: "{{ project_path }}"
      become_user: "{{ django_user }}"

    - name: copying the .env file
      copy:
        src: ./notes-project-files/.env
        dest: "{{ project_path }}/.env"
        owner: "{{ django_user }}"
        group: "{{ django_user }}"
        mode: '0644'
      become_user: "{{ django_user }}"

    - name: creating directories for logs
      file:
        path: "{{ item.path }}"
        state: directory
        owner: "{{ django_user }}"
        group: "{{ django_user }}"
        mode: "{{ item.mode }}"
      loop:
        - { path: '{{ django_user_home_path }}/logs', mode: '0775' }
        - { path: '{{ project_logs_path }}', mode: '0775' }
      become_user: "{{ django_user }}"
##########
# postgresql installation
    - name: sudo dnf install postgresql-remote-rpm-repository
      dnf:
        name: "https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm"
        disable_gpg_check: true
        state: latest

    - name: sudo dnf module disable postgresql
      copy:
        dest: /etc/dnf/modules.d/postgresql.module
        content: |
          [postgresql]
          name=postgresql
          stream=
          profiles=
          state=disabled
        owner: root
        group: root
        mode: '0644'

    - name: sudo dnf install packages
      dnf:
        name: ['postgresql{{ postgresql_version }}-server', 'postgresql{{ postgresql_version }}-devel', 'python3-pip', 'python3-psycopg2', 'python3-virtualenv', 'git', 'nginx']
        state: latest

    - name: checking postgresql initialization
      stat:
        path: "/var/lib/pgsql/{{ postgresql_version }}/data/pg_hba.conf"
      register: postgresql_data

    - name: sudo postgresql-setup initdb
      shell: "/usr/pgsql-{{ postgresql_version }}/bin/postgresql-{{ postgresql_version }}-setup initdb"
      when: not postgresql_data.stat.exists

    - name: sudo systemctl enable --now postgresql
      service:
        name: "postgresql-{{ postgresql_version }}"
        state: started
        enabled: yes

    - name: creating a symbolic link for the pg_config file
      file:
        src: "/usr/pgsql-{{ postgresql_version }}/bin/pg_config"
        dest: /usr/bin/pg_config
        state: link
        owner: root
        group: root
##########
# postgresql database setup
    - name: creating a database user
      postgresql_user:
        name: "{{ database_user }}"
        password: "{{ database_pass }}"
      become_user: postgres

    - name: database creation
      postgresql_db:
        name: "{{ database_name }}"
        owner: "{{ database_user }}"
        encoding: UTF8
        lc_ctype: "{{ locale }}"
        lc_collate: "{{ locale }}"
        template: template0
      become_user: postgres

    - name: setting client_encoding parameter for postgresql
      postgresql_set:
        name: client_encoding
        value: 'UTF8'
      become_user: postgres
      notify: sudo systemctl restart postgresql

    - name: setting default_transaction_isolation parameter for postgresql
      postgresql_set:
        name: default_transaction_isolation
        value: 'read committed'
      become_user: postgres
      notify: sudo systemctl restart postgresql

    - name: setting timezone parameter for postgresql
      postgresql_set:
        name: TimeZone
        value: 'Europe/Moscow'
      become_user: postgres
      notify: sudo systemctl restart postgresql
##########
# python virtual environment
    - name: sudo pip install packages
      pip:
        name: ['pip', 'virtualenv', 'virtualenvwrapper']
        state: latest

    - name: pip install packages in virtualenv
      pip:
        name: "{{ item.name }}"
        version: "{{ item.version }}"
        virtualenv: "{{ virtualenv_path }}"
      loop:
        - { name: 'django', version: '2.2.28' }
        - { name: 'psycopg2', version: '2.8.6' }
        - { name: 'gunicorn', version: '*' }
        - { name: 'python-decouple', version: '*' }
      become_user: "{{ django_user }}"

    - name: django project setup
      django_manage:
        command: "{{ item }}"
        project_path: "{{ project_path }}"
        virtualenv: "{{ virtualenv_path }}"
      loop:
        - makemigrations
        - migrate
        - collectstatic
      become_user: "{{ django_user }}"
##########
# nginx
    - name: sudo usermod nginx -aG django
      user:
        name: "{{ nginx_system_user_group }}"
        groups: "{{ django_user }}"
        append: true

    - name: creating the sites-available and sites-enabled directories
      file:
        path: "{{ item.path }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      loop:
        - { path: '/etc/nginx/sites-available' }
        - { path: '/etc/nginx/sites-enabled' }

    - name: copying nginx config files
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: root
        group: root
        mode: '0644'
      loop:
        - { src: './notes-project-files/nginx.conf.j2', dest: '/etc/nginx/nginx.conf' }
        - { src: './notes-project-files/nginx_proxy_params.j2', dest: '/etc/nginx/proxy_params' }
        - { src: './notes-project-files/notes_project.nginx.conf.j2', dest: '/etc/nginx/sites-available/notes_project.nginx.conf' }
      notify: sudo systemctl restart nginx

    - name: creating a symbolic link for the nginx config file
      file:
        src: /etc/nginx/sites-available/notes_project.nginx.conf
        dest: /etc/nginx/sites-enabled/notes_project.nginx.conf
        state: link
        owner: root
        group: root

    - name: sudo systemctl enable --now nginx
      service:
        name: nginx
        state: started
        enabled: yes
##########
# gunicorn
    - name: copying gunicorn service and socket files
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: root
        group: root
        mode: '0644'
      loop:
        - { src: './notes-project-files/gunicorn.service.j2', dest: '/etc/systemd/system/gunicorn.service' }
        - { src: './notes-project-files/gunicorn.socket.j2', dest: '/etc/systemd/system/gunicorn.socket' }
      notify: sudo systemctl daemon-reload

    - name: copying gunicorn config file
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ django_user }}"
        group: "{{ django_user }}"
        mode: '0644'
      loop:
        - { src: './notes-project-files/gunicorn.conf.py.j2', dest: '{{ project_etc_path }}/gunicorn.conf.py' }
      become_user: "{{ django_user }}"
      notify: sudo systemctl restart gunicorn

    - name: sudo systemctl enable --now gunicorn
      service:
        name: gunicorn
        state: started
        enabled: yes
##########
# handlers
  handlers:
    - name: sudo systemctl restart postgresql
      service:
        name: "postgresql-{{ postgresql_version }}"
        state: restarted

    - name: sudo systemctl restart nginx
      service:
        name: nginx
        state: restarted

    - name: sudo systemctl restart gunicorn
      service:
        name: gunicorn
        state: restarted

    - name: sudo systemctl daemon-reload
      systemd:
        daemon_reload: true
#########################
